plugins {
    id 'java'
    id 'eu.xenit.alfresco'
    id 'eu.xenit.amp'
}

ext {
    slf4jVersion = '1.7.25'
}

dependencies {
    alfrescoProvided project(":alfresco-health-processor-platform")
//    alfrescoProvided(enforcedPlatform("eu.xenit.alfresco:alfresco-community-bom:${alfrescoVersion}"))
    alfrescoProvided platform("org.alfresco:acs-community-packaging:${alfrescoVersion}")
    alfrescoProvided("org.alfresco:alfresco-repository") {
        exclude module: 'spring-social-facebook-web'
    }

    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"

    testImplementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: "${slf4jVersion}"
}

test {
    // By default tests should only run in the subprojects. To manually run tests in your IDEA, uncomment:
    enabled = false
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

subprojects { Project p ->
    apply plugin: 'java'

    def alfrescoVersion = project.name[-2..-1]
    apply from: "${project.projectDir}/overload.gradle"

    description = "Alfresco ${alfrescoVersion} with Health Processor"

    task integrationTest(type: Test) {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        testClassesDirs = project.parent.sourceSets.test.output.classesDirs
        classpath = project.parent.sourceSets.test.runtimeClasspath
        outputs.upToDateWhen { false }
    }

    check.dependsOn integrationTest

    apply plugin: 'eu.xenit.docker-alfresco'
    apply plugin: 'eu.xenit.docker-compose.auto'

    dependencies {
        if (project.hasProperty("alfrescoBaseWarBom")) {
            baseAlfrescoWar platform("${alfrescoBaseWarBom}")
        }
        baseAlfrescoWar "${alfrescoBaseWar}"
        alfrescoAmp project(path: ":integration-tests", configuration: "amp")
        alfrescoAmp project(path: ":alfresco-health-processor-platform", configuration: "amp")
        alfrescoAmp "eu.xenit.alfred.telemetry:alfred-telemetry-platform:${alfredTelemetryVersion}@amp"
        alfrescoSM(group: 'org.postgresql', name: 'postgresql', version: '42.6.0')
    }

    dockerBuild {
        alfresco {
            baseImage = "${alfrescoBaseImage}"
        }
    }

    dockerCompose {
        ignorePullFailure = true
        useComposeFiles = [
                "${project.parent.projectDir}/src/test/resources/compose/docker-compose.yml",
        ]

//        scale = [alfresco: 2]
        ignorePullFailure = false

        removeVolumes = true
        captureContainersOutput = false

        // Uncomment for quick iterations when developing integration tests
        // stopContainers = false

        environment.put 'COMPOSE_INFLOW_TCP_8080', project.findProperty('random_ports') ? '8080' : '8080:8080'

        isRequiredBy(project.tasks.integrationTest)
    }
}
